#!/bin/bash

# Check if a component name was provided as an argument
if [ -z "$1" ]; then
  echo "Please provide a component name as an argument"
  exit 1
fi

if [[ ${1:0:1} != [A-Z] ]] || [[ ${1:1} != *[a-z]* ]]; then
  echo "The first letter of a React component should be a capital."
  exit 1
fi

include_styles=false
include_props=false
include_redux=false

# Check for the -i flag
while getopts "i" opt; do
  case ${opt} in
    s )
      # Set the variable to true if the -i flag is passed
      include_styles=true
      ;;
    p )
      # Set the variable to true if the -i flag is passed
      include_redux=true
      ;;
    \? )
      echo "Invalid option: -$OPTARG" 1>&2
      exit 1
      ;;
  esac
done

# Now that we've checked for the -i flag, we can start executing the rest of the script.
# The value of the "interactive" variable can be used throughout the script to determine whether to prompt the user for input or not.

if [ "$include_styles" = true ]; then
  echo "Including styles"
fi

if [ "$include_props" = true ]; then
  echo "Including propTypes"
fi

if [ "$include_redux" = true ]; then
  echo "Including redux"
fi

# Assign the argument to a  variable
COMPONENT_NAME="$1"
COMPONENT_NAME_LOWER="$(tr '[:upper:]' '[:lower:]' <<<"${1:0:1}")${1:1}"

# Make the component folder
mkdir $COMPONENT_NAME
cd $COMPONENT_NAME

# Create the styles file
cat <<EOF > "$COMPONENT_NAME.style.js"
import { createUseStyles } from "react-jss";

const useStyles = createUseStyles({
  $COMPONENT_NAME_LOWER: {
    color: "red"
  }
});

export default useStyles;
EOF

# Create the propTypes file
cat <<EOF > "$COMPONENT_NAME.propTypes.js"
import PropTypes from "prop-types";

const propTypes = {};

export default propTypes;
EOF

# Create the file and write some sample code to it using a here document
cat <<EOF > "$COMPONENT_NAME.jsx"
import React from "react";
import propTypes from "./$COMPONENT_NAME.propTypes.js"
import useStyles from "./$COMPONENT_NAME.styles.js"

const $COMPONENT_NAME = () => {
  const classes = useStyles()

  return <div className={classes.$COMPONENT_NAME_LOWER}>$COMPONENT_NAME component</div>
}

$COMPONENT_NAME.propTypes = propTypes

export default $COMPONENT_NAME
EOF

# Create the index file
cat <<EOF > "index.js"
export { default } from "./$COMPONENT_NAME.jsx";
EOF

# Confirm that the file was created and populated
echo "Created component skeleton named "$COMPONENT_NAME"'
