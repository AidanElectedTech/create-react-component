#!/bin/bash

# Flag variables
INCLUDE_STYLES=false
INCLUDE_PROPS=false
INCLUDE_REDUX=false
INCLUDE_TEST=false

while getopts "sprt" flag; do
    case $flag in
        s)
            INCLUDE_STYLES=true
            ;;
        p)
            INCLUDE_PROPS=true
            ;;
        r)
            INCLUDE_REDUX=true
            ;;
        t)
            INCLUDE_TEST=true
            ;;
    esac
done
shift $((OPTIND-1))


# Check if a component name was provided as an argument
if [ -z "$1" ]; then
  echo "Please provide a component name as an argument"
  exit 1
fi

if [[ ${1:0:1} != [A-Z] ]] || [[ ${1:1} != *[a-z]* ]]; then
  echo "The first letter of a React component should be a capital."
  exit 1
fi

if [ -d "$1" ]
then
    echo "Component folder already exists"
    exit 1
fi

# Assign the argument to a friendly variable
COMPONENT_NAME="$1"
COMPONENT_NAME_LOWER="$(tr '[:upper:]' '[:lower:]' <<<"${1:0:1}")${1:1}"

# Make the component folder
mkdir $COMPONENT_NAME
cd $COMPONENT_NAME

if $INCLUDE_STYLES; then
# Create the styles file
cat <<EOF > "$COMPONENT_NAME.styles.js"
import { createUseStyles } from "react-jss";

const useStyles = createUseStyles({
  $COMPONENT_NAME_LOWER: {},
});

export default useStyles;
EOF
fi

if $INCLUDE_PROPS; then
  # Create the propTypes file
  cat <<EOF > "$COMPONENT_NAME.propTypes.js"
import PropTypes from "prop-types";

const propTypes = {
  $COMPONENT_NAME_LOWER: PropTypes.any,
};

export default propTypes;
EOF
fi

if $INCLUDE_REDUX; then
  # Create the propTypes file
  cat <<EOF > "$COMPONENT_NAME.redux.js"
// import { useDispatch, useSelector } from "react-redux";

// import { dispatchSetValue } from "../slice/slicename";

export const useReduxSlice = () => {
  // const dispatch = useDispatch()
  // const setValue = (value) => dispatch(dispatchSetValue(value))
  // const value = useSelector((state) => state["slicename"].value);

  return { value: "", setValue: () => {} };
};

EOF
fi

if $INCLUDE_TEST; then
  # Create the test file
  cat <<EOF > "$COMPONENT_NAME.test.jsx"
import '@testing-library/jest-dom'

import $COMPONENT_NAME from './$COMPONENT_NAME'
import React from 'react'
import { render } from '@testing-library/react'

const text = "Hello, World!"

test('<$COMPONENT_NAME> exists', () => {
  const { getByText } = render(
    <$COMPONENT_NAME>
      <h1>{text}</h1>
    </$COMPONENT_NAME>
  )
  expect(getByText(text)).toBeInTheDocument()
})


EOF
fi

# Create the file and write some sample code to it using a here document
cat <<EOF > "$COMPONENT_NAME.jsx"
import React from "react"
$(if [ "$INCLUDE_PROPS" = true ]; then echo "import propTypes from \"./$COMPONENT_NAME.propTypes.js\""; fi)
$(if [ "$INCLUDE_STYLES" = true ]; then echo "import useStyles from \"./$COMPONENT_NAME.styles.js\""; fi)
$(if [ "$INCLUDE_REDUX" = true ]; then echo "import { useReduxSlice } from \"./$COMPONENT_NAME.redux.js\""; fi)

$(if [ "$INCLUDE_PROPS" = true ]; then echo "const $COMPONENT_NAME = ({ $COMPONENT_NAME_LOWER }) => {"; else echo "const $COMPONENT_NAME = () => {"; fi)
$(if [ "$INCLUDE_STYLES" = true ]; then echo "  const classes = useStyles()"; fi)
$(if [ "$INCLUDE_REDUX" = true ]; then echo "  const { value } = useReduxSlice()"; fi)

  return (
$(if [ "$INCLUDE_STYLES" = true ]; then echo "    <div className={classes.$COMPONENT_NAME_LOWER}>$COMPONENT_NAME component</div>"; else echo "    <div>$COMPONENT_NAME component</div>"; fi)
  )
}

$(if [ "$INCLUDE_PROPS" = true ]; then echo "$COMPONENT_NAME.propTypes = propTypes"; fi)

export default $COMPONENT_NAME
EOF

# Create the index file
cat <<EOF > "index.js"
export { default } from "./$COMPONENT_NAME.jsx";
EOF

# Remove extra empty lines from the output
sed -i '/^$/N;/^\n$/D' "$COMPONENT_NAME.jsx"

# Confirm that the file was created and populated
echo 'Created component skeleton named "'$COMPONENT_NAME'"'
